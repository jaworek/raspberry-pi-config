version: "3.8"

services:
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    labels:
      - traefik.http.routers.portainer-local.rule=Host(`portainer.lan`)
      - traefik.http.routers.portainer-local.entrypoints=web
      - traefik.http.routers.portainer-local.service=portainer
      - traefik.http.routers.portainer.service=portainer
      - traefik.http.routers.portainer-secure.service=portainer
      - traefik.http.routers.portainer.rule=Host(`portainer.jwr.ski`)
      - traefik.http.routers.portainer.entrypoints=web
      - traefik.http.routers.portainer-secure.entrypoints=websecure
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      - traefik.http.routers.portainer-secure.rule=Host(`portainer.jwr.ski`)
      - traefik.http.routers.portainer-secure.tls=true
      - traefik.http.routers.portainer-secure.tls.certresolver=myresolver
      - traefik.http.routers.portainer.middlewares=redirect-to-https@file
      - traefik.http.routers.portainer-secure.middlewares=ip-whitelist@file
      - traefik.http.routers.portainer-local.middlewares=ip-whitelist@file
    ports:
      - "8000:8000"
      - "9000:9000"
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - 'portainer_data:/data portainer/portainer'
    restart: unless-stopped

  adguard:
    container_name: adguard
    image: adguard/adguardhome
    labels:
      - traefik.http.routers.adguard.rule=Host(`adguard.lan`)
      - traefik.http.services.adguard.loadbalancer.server.port=80
      - traefik.http.routers.adguard.middlewares=ip-whitelist@file
    ports:
      - '53:53/tcp'
      - '53:53/udp'
      - '9001:80/tcp'
      - '3000:3000/tcp'
    volumes:
      - 'adguard-data:/opt/adguardhome/work'
      - 'adguard-config:/opt/adguardhome/conf'
    restart: unless-stopped

  reverse-proxy:
    container_name: traefik
    image: traefik:v2.6.1
    labels:
      - traefik.http.routers.traefik.rule=Host(`traefik.lan`)
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.routers.traefik.middlewares=ip-whitelist@file
    # Enables the web UI and tells Traefik to listen to docker
    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./dynamic.yml:/etc/traefik/dynamic.yml
      - ./acme.json:/etc/traefik/acme.json
    restart: unless-stopped

  openbooks:
    container_name: openbooks
    image: evanbuss/openbooks
    labels:
      - traefik.http.routers.openbooks.rule=Host(`openbooks.lan`)
      - traefik.http.services.openbooks.loadbalancer.server.port=9002
      - traefik.http.routers.openbooks.middlewares=ip-whitelist@file
    command: --persist
    ports:
      - "9002:80"
    volumes:
      - "openbooks-data:/books"
    restart: unless-stopped

  cloudflare-ddns:
    container_name: cloudflare-ddns
    image: oznu/cloudflare-ddns:latest
    secrets:
      - cloudflare-api-key
    environment:
      - API_KEY_FILE=/run/secrets/cloudflare-api-key
      - ZONE=jwr.ski
      - SUBDOMAIN=home
      - PROXIED=true
    restart: unless-stopped
    

volumes:
    portainer_data:
    adguard-data:
            external: true
    adguard-config:
            external: true
    openbooks-data:

secrets:
  cloudflare-api-key:
    file: ./cloudflare-api-key.txt
